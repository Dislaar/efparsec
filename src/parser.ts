import { chromium, Browser, Page } from 'playwright';
import { SearchParams, ParseResult, BulkParseResult, BulkSearchResult, BankruptcyCase } from './types';
import { validateINN } from './utils';
import { Solver } from '@2captcha/captcha-solver';
import { EventEmitter } from 'events';

export class EFRSBParser {
  private solver = new Solver(process.env.TWOCAPTCHA_KEY || '06dc1226bf2e6dc40227cc6c608ede0e');
  private browser: Browser | null = null;
  private page: Page | null = null;
  private readonly baseUrl = 'https://bankrot.fedresurs.ru/bankrupts';
  private eventEmitter = new EventEmitter();

  async initialize(): Promise<void> {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
    this.browser = await chromium.launch({
      headless: true, // –û—Å—Ç–∞–≤–ª—è–µ–º false –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      slowMo: 100,
      // proxy: { server: 'http://your-proxy:port', username: 'user', password: 'pass' } // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏
    });
    this.page = await this.browser.newPage({
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    });
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', this.baseUrl);
    try {
      await this.page.goto(this.baseUrl, { waitUntil: 'networkidle', timeout: 30000 });
      console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = await this.page.evaluate(() => document.body.innerText);
      if (errorMessage.includes('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω') || errorMessage.includes('–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω')) {
        throw new Error('–°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è CAPTCHA –∏–ª–∏ –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ CAPTCHA
      const captcha = await this.page.$('.g-recaptcha');
      if (captcha) {
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA, —Ä–µ—à–∞–µ–º...');
        const siteKey = await this.page.evaluate(() => {
          const captchaDiv = document.querySelector('.g-recaptcha');
          return captchaDiv ? captchaDiv.getAttribute('data-sitekey') : null;
        });
        if (!siteKey) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á reCAPTCHA (data-sitekey)');
        }
        console.log('–ù–∞–π–¥–µ–Ω siteKey:', siteKey);
        try {
          const response = await this.solver.recaptcha({ googlekey: siteKey, pageurl: this.baseUrl });
          const captchaCode = response.data;
          console.log('CAPTCHA —Ä–µ—à–µ–Ω–∞, –∫–æ–¥:', captchaCode);
          await this.page.evaluate((code) => {
            const textarea = document.getElementById('g-recaptcha-response') as HTMLTextAreaElement;
            if (textarea) textarea.value = code;
          }, captchaCode);
          const submitCaptcha = await this.page.$('input[type="submit"], button[type="submit"]');
          if (submitCaptcha) {
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É CAPTCHA...');
            await submitCaptcha.click();
            await this.page.waitForTimeout(2000);
          } else {
            console.log('–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CAPTCHA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
          }
        } catch (captchaError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ CAPTCHA:', captchaError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å CAPTCHA: ' + (captchaError instanceof Error ? captchaError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
      } else {
        console.log('CAPTCHA –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      throw error;
    }
  }

  async close(): Promise<void> {
    if (this.browser) {
      console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
      await this.browser.close();
      this.browser = null;
      this.page = null;
    }
  }

  async search(params: SearchParams): Promise<ParseResult> {
    if (!this.page) {
      await this.initialize();
      if (!this.page) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞');
      }
    }

    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫:', params);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const validation = this.validateSearchParams(params);
      if (!validation.isValid) {
        return { success: false, data: [], error: validation.message };
      }

      const { query = '', region = '–î–æ–Ω–µ—Ü–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞' } = params;

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const pageHtml = await this.page.evaluate(() => document.documentElement.outerHTML);
      console.log('HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageHtml.substring(0, 2000));

      // –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
      const searchInput = '[formcontrolname="searchString"]';
      console.log('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞:', searchInput);
      await this.page.waitForSelector(searchInput, { state: 'visible', timeout: 30000 });
      await this.page.fill(searchInput, '');
      await this.page.fill(searchInput, query);
      console.log('–í–≤–µ–¥—ë–Ω –∑–∞–ø—Ä–æ—Å:', query);

      // –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
      const regionSelector = 'input[role="combobox"]:not([readonly])';
      console.log('–û–∂–∏–¥–∞–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞:', regionSelector);
      try {
        const comboboxes = await this.page.$$('input[role="combobox"]');
        console.log('–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å role="combobox":', comboboxes.length);
        for (let i = 0; i < comboboxes.length; i++) {
          const isVisible = await comboboxes[i].isVisible();
          const isReadonly = await comboboxes[i].getAttribute('readonly');
          console.log(`–≠–ª–µ–º–µ–Ω—Ç ${i + 1}: visible=${isVisible}, readonly=${isReadonly}`);
        }

        await this.page.waitForSelector(regionSelector, { state: 'visible', timeout: 30000 });
        await this.page.click(regionSelector);
        await this.page.fill(regionSelector, region);
        await this.page.keyboard.press('Enter');
        console.log('–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω:', region);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞:', error);
        const fallbackSelector = 'input[role="combobox"][aria-expanded]';
        console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞:', fallbackSelector);
        await this.page.waitForSelector(fallbackSelector, { state: 'visible', timeout: 15000 });
        await this.page.click(fallbackSelector);
        await this.page.fill(fallbackSelector, region);
        await this.page.keyboard.press('Enter');
        console.log('–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º:', region);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ CAPTCHA –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
      const captcha = await this.page.$('.g-recaptcha');
      if (captcha) {
        console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞, —Ä–µ—à–∞–µ–º...');
        const siteKey = await this.page.evaluate(() => {
          const captchaDiv = document.querySelector('.g-recaptcha');
          return captchaDiv ? captchaDiv.getAttribute('data-sitekey') : null;
        });
        if (!siteKey) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á reCAPTCHA (data-sitekey) –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞');
        }
        const response = await this.solver.recaptcha({ googlekey: siteKey, pageurl: this.baseUrl });
        const captchaCode = response.data;
        console.log('CAPTCHA —Ä–µ—à–µ–Ω–∞, –∫–æ–¥:', captchaCode);
        await this.page.evaluate((code) => {
          const textarea = document.getElementById('g-recaptcha-response') as HTMLTextAreaElement;
          if (textarea) textarea.value = code;
        }, captchaCode);
          const submitCaptcha = await this.page.$('input[type="submit"], button[type="submit"]');
          if (submitCaptcha) {
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É CAPTCHA...');
            await submitCaptcha.click();
            await this.page.waitForTimeout(2000);
          }
      }

      // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
      const submitButton = '.u-svg-lupa';
      console.log('–û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞:', submitButton);
      try {
        await this.page.waitForSelector(submitButton, { state: 'visible', timeout: 40000 });
        await this.page.click(submitButton);
        console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ (.u-svg-lupa)');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ .u-svg-lupa:', error);
        const fallbackButton = '.itm-lupa';
        console.log('–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏:', fallbackButton);
        try {
          await this.page.waitForSelector(fallbackButton, { state: 'visible', timeout: 15000 });
          await this.page.click(fallbackButton);
          console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ (.itm-lupa)');
        } catch (fallbackError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ .itm-lupa:', fallbackError);
          const secondFallback = '.itm-lupa__img';
          console.log('–ü—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏:', secondFallback);
          await this.page.waitForSelector(secondFallback, { state: 'visible', timeout: 15000 });
          await this.page.click(secondFallback);
          console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ (.itm-lupa__img)');
        }
      }

      // –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log('–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      await this.page.waitForTimeout(5000);

      // –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const resultSelector = '.u-card-result__wrapper';
      console.log('–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º:', resultSelector);
      const results = await this.page.$$eval(
        resultSelector,
        (cards: Element[], args: { query: string; region: string }) => {
          return cards.map((card: Element) => {
            const text = card.textContent || '';
            const caseNumberMatch = text.match(/–ê\d+-\d+\/\d{4}/);
            const innMatch = text.match(/\b\d{10,12}\b/);
            const statusKeywords = ['–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', '–∫–æ–Ω–∫—É—Ä—Å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–º–∏—Ä–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ'];
            let status = '–ê–∫—Ç–∏–≤–Ω–æ–µ';
            for (const keyword of statusKeywords) {
              if (text.toLowerCase().includes(keyword)) {
                status = keyword.charAt(0).toUpperCase() + keyword.slice(1);
                break;
              }
            }

            return {
              caseNumber: caseNumberMatch ? caseNumberMatch[0] : '–ù–µ —É–∫–∞–∑–∞–Ω',
              debtorName: card.querySelector('.u-card-result__name span')?.textContent || args.query,
              inn: innMatch ? innMatch[0] : undefined,
              address: card.querySelector('.u-card-result__value_adr')?.textContent || '',
              ogrn: card.querySelector('.u-card-result__item-id:nth-child(2) .u-card-result__value_fw')?.textContent || '',
              status: card.querySelector('.u-card-result__value_item-property')?.textContent || status,
              court: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥',
              region: args.region,
              lastUpdate: card.querySelector('.status-date')?.textContent || new Date().toLocaleDateString('ru-RU'),
              manager: card.querySelector('.u-card-result__manager .u-card-result__value_w230')?.textContent || ''
            };
          }).filter((result: BankruptcyCase | null) => result !== null) as BankruptcyCase[];
        },
        { query, region }
      );

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –∫–ª–∏–∫–∞–µ–º "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ", –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞
      const loadMoreButton = '.btn_load_more';
      while (await this.page.isVisible(loadMoreButton)) {
        console.log('–ö–ª–∏–∫–∞–µ–º "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ"...');
        await this.page.click(loadMoreButton);
        await this.page.waitForTimeout(5000);
        const newResults = await this.page.$$eval(
          resultSelector,
          (cards: Element[], args: { query: string; region: string }) => {
            return cards.map((card: Element) => {
              const text = card.textContent || '';
              const caseNumberMatch = text.match(/–ê\d+-\d+\/\d{4}/);
              const innMatch = text.match(/\b\d{10,12}\b/);
              const statusKeywords = ['–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', '–∫–æ–Ω–∫—É—Ä—Å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–º–∏—Ä–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ'];
              let status = '–ê–∫—Ç–∏–≤–Ω–æ–µ';
              for (const keyword of statusKeywords) {
                if (text.toLowerCase().includes(keyword)) {
                  status = keyword.charAt(0).toUpperCase() + keyword.slice(1);
                  break;
                }
              }

              return {
                caseNumber: caseNumberMatch ? caseNumberMatch[0] : '–ù–µ —É–∫–∞–∑–∞–Ω',
                debtorName: card.querySelector('.u-card-result__name span')?.textContent || args.query,
                inn: innMatch ? innMatch[0] : undefined,
                address: card.querySelector('.u-card-result__value_adr')?.textContent || '',
                ogrn: card.querySelector('.u-card-result__item-id:nth-child(2) .u-card-result__value_fw')?.textContent || '',
                status: card.querySelector('.u-card-result__value_item-property')?.textContent || status,
                court: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥',
                region: args.region,
                lastUpdate: card.querySelector('.status-date')?.textContent || new Date().toLocaleDateString('ru-RU'),
                manager: card.querySelector('.u-card-result__manager .u-card-result__value_w230')?.textContent || ''
              };
            }).filter((result: BankruptcyCase | null) => result !== null) as BankruptcyCase[];
          },
          { query, region }
        );
        results.push(...newResults);
      }

      console.log('–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
      return {
        success: true,
        data: results,
        totalFound: results.length
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      return {
        success: false,
        data: [],
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  async bulkSearch(innList: string[]): Promise<BulkParseResult> {
    if (!this.page) {
      await this.initialize();
      if (!this.page) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞');
    }

    let totalProcessed = 0;
    const results: BulkSearchResult[] = [];

    try {
      for (const [index, inn] of innList.entries()) {
        const trimmedInn = inn.trim();
        totalProcessed++;
        const validation = validateINN(trimmedInn);
        if (!validation.isValid) {
          this.dispatchProgressEvent(index + 1, innList.length, trimmedInn);
          results.push({ inn: trimmedInn, isBankrupt: false, cases: [], error: validation.message });
          await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫
          continue;
        }
        const params: SearchParams = { type: 'inn', query: trimmedInn, region: '–î–æ–Ω–µ—Ü–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞' };
        const result = await this.search(params);
        this.dispatchProgressEvent(index + 1, innList.length, trimmedInn);
        results.push({ inn: trimmedInn, isBankrupt: result.success && result.data.length > 0, cases: result.data, error: result.error });
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫
      }

      return { success: true, results, totalProcessed };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return {
        success: false,
        results,
        totalProcessed,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    } finally {
      await this.close();
    }
  }

  private validateSearchParams(params: SearchParams): { isValid: boolean; message: string } {
    if (!params.query || params.query.trim().length === 0) {
      return { isValid: false, message: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
    }
    if (params.type === 'inn') {
      const innValidation = validateINN(params.query);
      if (!innValidation.isValid) {
        return { isValid: false, message: innValidation.message };
      }
    }
    if (params.query.trim().length < 3) {
      return { isValid: false, message: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' };
    }
    return { isValid: true, message: '' };
  }

  private dispatchProgressEvent(current: number, total: number, currentInn: string): void {
    const progress = { current, total, currentInn, percentage: Math.round((current / total) * 100) };
    console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:', progress);
    this.eventEmitter.emit('progress', progress);
  }

  onProgress(callback: (progress: { current: number; total: number; currentInn: string; percentage: number }) => void): void {
    this.eventEmitter.on('progress', callback);
  }
}